# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(2) do |config|
    # The most common configuration options are documented and commented below.
    # For a complete reference, please see the online documentation at
    # https://docs.vagrantup.com.

    # Every Vagrant development environment requires a box. You can search for
    # boxes at https://atlas.hashicorp.com/search.
    config.vm.box = "bfee-arch-bootstrapped"

    # Disable automatic box update checking. If you disable this, then
    # boxes will only be checked for updates when the user runs
    # `vagrant box outdated`. This is not recommended.
    # config.vm.box_check_update = false

    # Create a forwarded port mapping which allows access to a specific port
    # within the machine from a port on the host machine. In the example below,
    # accessing "localhost:8080" will access port 80 on the guest machine.
    # config.vm.network "forwarded_port", guest: 80, host: 8080

    # Share an additional folder to the guest VM. The first argument is
    # the path on the host to the actual folder. The second argument is
    # the path on the guest to mount the folder. And the optional third
    # argument is a set of non-required options.
    # config.vm.synced_folder "../data", "/vagrant_data"

    config.vm.provider "virtualbox" do |vb|
        vb.gui = true
        #    vb.memory = 4096
        #    vb.cpus = 2
    end

    config.vm.provision "ansible", run: "always" do |ansible|
        ansible.playbook = "../../ping.yml"
        ansible.config_file = "ansible.cfg"
        ansible.host_vars = {
            "default" => { "ansible_python_interpreter" => "/usr/bin/python2" }
        }
        ansible.compatibility_mode = "2.0"
        #    ansible.verbose = "vvvv"
    end
    if ARGV.include? '--provision-with'
        config.vm.provision "main", type: "ansible" do |ansible|
            ansible.playbook = "../../main.yml"
            ansible.config_file = "ansible.cfg"
            ansible.host_vars = {
                "default" => { "ansible_python_interpreter" => "/usr/bin/python2" }
            }
            ansible.ask_become_pass = true
            ansible.compatibility_mode = "2.0"
        end
        config.vm.provision "ping", type: "ansible" do |ansible|
            ansible.playbook = "../../ping.yml"
            ansible.config_file = "ansible.cfg"
            ansible.host_vars = {
                "default" => { "ansible_python_interpreter" => "/usr/bin/python2" }
            }
            ansible.compatibility_mode = "2.0"
        end
        config.vm.provision "reboot", type: "ansible" do |ansible|
            ansible.playbook = "../../reboot.yml"
            ansible.config_file = "ansible.cfg"
            ansible.host_vars = {
                "default" => { "ansible_python_interpreter" => "/usr/bin/python2" }
            }
            ansible.ask_become_pass = true
            ansible.compatibility_mode = "2.0"
        end
        config.vm.provision "facts", type: "ansible" do |ansible|
            ansible.playbook = "../../facts.yml"
            ansible.config_file = "ansible.cfg"
            ansible.host_vars = {
                "default" => { "ansible_python_interpreter" => "/usr/bin/python2" }
            }
            ansible.compatibility_mode = "2.0"
        end
        config.vm.provision "update", type: "ansible" do |ansible|
            ansible.playbook = "../../update.yml"
            ansible.config_file = "ansible.cfg"
            ansible.host_vars = {
                "default" => { "ansible_python_interpreter" => "/usr/bin/python2" }
            }
            ansible.ask_become_pass = true
            ansible.compatibility_mode = "2.0"
        end
        config.vm.provision "upgrade", type: "ansible" do |ansible|
            ansible.playbook = "../../upgrade.yml"
            ansible.config_file = "ansible.cfg"
            ansible.host_vars = {
                "default" => { "ansible_python_interpreter" => "/usr/bin/python2" }
            }
            ansible.ask_become_pass = true
            ansible.compatibility_mode = "2.0"
        end
    end
end

