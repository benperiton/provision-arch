#!/usr/bin/env bash

###############################################################################
# 
# curl -fsSL
# -f  
# -s  
# -S  Silent
# -L  Follow location
# 
# 
###############################################################################

# Bash "strict" mode, -o pipefail removed
SOURCED=false && [ "${0}" = "${BASH_SOURCE[0]}" ] || SOURCED=true
if ! $SOURCED; then
  set -eEu
  shopt -s extdebug
  trap 's=$?; echo "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $s' ERR
  IFS=$'\n\t'
fi


###############################################################################
# Text modifiers
###############################################################################
Bold="\033[1m"
Reset="\033[0m"


###############################################################################
# Colors
###############################################################################
Red="\033[31m"
Green="\033[32m"
Yellow="\033[33m"


###############################################################################
# Paths
###############################################################################
WORKING_DIR=$(pwd)
LOG="${WORKING_DIR}/arch-install.log"
[[ -f ${LOG} ]] && rm -f "${LOG}"
echo "Start log..." >>"${LOG}"


###############################################################################
# Flags and variables
###############################################################################
SYS_ARCH=$(uname -m) # Architecture (x86_64)
UEFI=0
KEYMAP="uk"
VENDOR="intel"

###############################################################################
# User provided variables
###############################################################################
HOST_NAME="machine"
RAND_HOST_NAME="machine-$((1 + RANDOM % 1000)).lan.skund.io"
KERNEL_VERSION="zen"
MAIN_DISK="/dev/sda"
MAIN_DISK_NVME=""
PRIV_USERNAME=""
PRIV_PASSWORD=""
WIFI_ENABLED=1


###############################################################################
# Helpers
###############################################################################
print_line() {
  printf "%$(tput cols)s\n" | tr ' ' '-' |& tee -a "${LOG}"
}

blank_line() {
  echo -e "\n" |& tee -a "${LOG}"
}

print_title() {
  clear
  print_line
  echo -e "# ${Bold}$1${Reset}" |& tee -a "${LOG}"
  print_line
  echo "" |& tee -a "${LOG}"
}

print_title_info() {
  T_COLS=$(tput cols)
  echo -e "${Bold}$1${Reset}\n" | fold -sw $((T_COLS - 18)) | sed 's/^/\t/' |& tee -a "${LOG}"
}

print_status() {
  T_COLS=$(tput cols)
  echo -e "$1${Reset}" | fold -sw $((T_COLS - 1)) |& tee -a "${LOG}"
}

print_info() {
  T_COLS=$(tput cols)
  echo -e "${Bold}$1${Reset}" | fold -sw $((T_COLS - 1)) |& tee -a "${LOG}"
}

print_warning() {
  T_COLS=$(tput cols)
  echo -e "${Yellow}$1${Reset}" | fold -sw $((T_COLS - 1)) |& tee -a "${LOG}"
}

print_success() {
  T_COLS=$(tput cols)
  echo -e "${Green}$1${Reset}" | fold -sw $((T_COLS - 1)) |& tee -a "${LOG}"
}

error_msg() {
  T_COLS=$(tput cols)
  echo -e "${Red}$1${Reset}\n" | fold -sw $((T_COLS - 1)) |& tee -a "${LOG}"
  exit 1
}

pause_function() {
  print_line
  if [[ ${ai_automatic_install:-} != 1 ]]; then
    read -re -sn 1 -p "Press enter to continue..."
  fi
}

invalid_option() {
  print_line
  print_warning "Invalid option. Try again."
}

contains_element() {
  #check if an element exist in a string
  for e in "${@:2}"; do [[ $e == "$1" ]] && break; done
}

print_summary() {
  print_title "Summary"
  print_title_info "Below is a summary of your selections and any auto-detected system information.  If anything is wrong cancel out now with Ctrl-C.  If you continue the installation will begin and there will be no more input required."
  print_line
  if [[ $UEFI == 1 ]]; then
    print_status "The machine architecture is $VENDOR $SYS_ARCH and UEFI has been found."
  else
    print_status "The machine architecture is $VENDOR $SYS_ARCH and a BIOS has been found."
  fi

  print_status "The hostname selected is $HOST_NAME"

  case "$KERNEL_VERSION" in
  "lts")
    print_status "The LTS kernel will be installed."
    ;;
  "hard")
    print_status "The hardened kernel will be installed."
    ;;
  "zen")
    print_status "The Zen kernel will be installed."
    ;;
  *)
    print_status "The default kernel will be installed."
    ;;
  esac

  blank_line
  print_status "Installing to $MAIN_DISK."

  blank_line
  print_status "Privileged user ${PRIV_USERNAME} will be created with sudo rights."

  blank_line
  pause_function
}

arch_chroot() {
  arch-chroot /mnt /bin/bash -c "${1}" "${2:-}" |& tee -a "${LOG}"
}

is_package_installed() {
  #check if a package is already installed
  for PKG in $1; do
    pacman -Q "$PKG" &>/dev/null && return 0
  done
  return 1
}


###############################################################################
# Verification Functions
###############################################################################
check_root() {
  print_info "Checking root permissions..."

  if [[ "$(id -u)" != "0" ]]; then
    error_msg "ERROR! You must execute the script as the 'root' user."
  fi
}

check_archlinux() {
  if [[ ! -e /etc/arch-release ]]; then
    error_msg "ERROR! You must execute the script on Arch Linux."
  fi
}

check_vendor() {
  vendor=$(lscpu | awk '/^Vendor ID/{print $3}')
  if [[ "$vendor" == "GenuineIntel" ]]; then
     VENDOR='intel'
  elif [[ "$vendor" == "AuthenticAMD" ]]; then
     VENDOR='amd'
  else
      error_msg "ERROR! Only Intel and AMD are supported."
  fi
}

check_boot_system() {
  if [[ "$(cat /sys/class/dmi/id/sys_vendor)" == 'Apple Inc.' ]] || [[ "$(cat /sys/class/dmi/id/sys_vendor)" == 'Apple Computer, Inc.' ]]; then
    modprobe -r -q efivars || true # if MAC
  else
    modprobe -q efivarfs # all others
  fi

  if [[ -d "/sys/firmware/efi/" ]]; then
    ## Mount efivarfs if it is not already mounted
    # shellcheck disable=SC2143
    if [[ -z $(mount | grep /sys/firmware/efi/efivars) ]]; then
      mount -t efivarfs efivarfs /sys/firmware/efi/efivars
    fi
    UEFI=1
  else
    UEFI=0
    error_msg "ERROR! You must execute the script on a machine capable of UEFI."
  fi
}


###############################################################################
# Prompts / User interaction
###############################################################################
ask_for_hostname() {
  print_title "Hostname"
  print_title_info "Pick a hostname for this machine.  Press enter to use the randomly generated hostname."
  read -rp "Hostname [${RAND_HOST_NAME}]: " HOST_NAME
  if [[ $HOST_NAME == "" ]]; then
    HOST_NAME=$RAND_HOST_NAME
  fi
}

ask_for_main_disk() {
    print_info "Determining main disk..."
  devices_list=($(lsblk --nodeps --noheading --list --exclude 1,11,7 | awk '{print "/dev/" $1}'))

  if [[ ${#devices_list[@]} == 1 ]]; then
    device=${devices_list[0]}
  else
    print_title "Main Disk Selection"
    print_title_info "Select which disk to use for the main installation (where root and boot will go)."
    lsblk --nodeps --list --exclude 1,11,7 --output "name,size,type"
    blank_line
    PS3="Enter your option: "
    echo -e "Select main drive:\n"
    select device in "${devices_list[@]}"; do
      if contains_element "${device}" "${devices_list[@]}"; then
        break
      else
        invalid_option
      fi
    done
  fi
  MAIN_DISK=$device
  if [[ $device == *"nvme"* ]]; then
    MAIN_DISK_NVME="p"
  fi
}

ask_for_kernel_level() {
  if [[ -n ${ai_kernel_version:-} ]]; then
    KERNEL_VERSION="${ai_kernel_version}"
    return
  fi

  if [[ ${ai_automatic_install:-} == 1 ]]; then
    KERNEL_VERSION="lts"
    return
  fi

  print_title "Kernel Selection"
  print_title_info "Select which linux kernel to install. The LTS version is generally prefered and more stable."
  version_list=("linux-zen (optimized for everyday use, recommended)" "linux (default kernel)" "linux-lts (long term support)" "linux-hardened (security features)")
  blank_line
  PS3="Enter your option: "
  echo -e "Select linux version to install\n"
  select VERSION in "${version_list[@]}"; do
    if contains_element "$VERSION" "${version_list[@]}"; then
      if [ "linux (default kernel)" == "$VERSION" ]; then
        KERNEL_VERSION="default"
      elif [ "linux-lts (long term support, recommended)" == "$VERSION" ]; then
        KERNEL_VERSION="lts"
      elif [ "linux-hardened (security features)" == "$VERSION" ]; then
        KERNEL_VERSION="hard"
      elif [ "linux-zen (optimized for everyday use)" == "$VERSION" ]; then
        KERNEL_VERSION="zen"
      fi
      break
    else
      invalid_option
    fi
  done
}

ask_for_wifi() {
  print_title "WiFi"
  print_title_info "Install iwd and copy network configs."
  
  read -rn 1 -p "Do you want to install WiFi stuff? (y/N) " WIFI_STUFF
  if [[ $WIFI_STUFF == "" ]]; then
    WIFI_STUFF="N"
  fi

  if [[ $WIFI_STUFF == "n" ]] || [[ $WIFI_STUFF == "N" ]]; then
    WIFI_ENABLED=0
    return
  fi

}

ask_for_user_account() {
  print_title "Privileged Account Username"
  print_title_info "Create a new user that can sudo"

  local was_set="false"

  blank_line
  while [[ $was_set == "false" ]]; do
    local user=""
    read -rp "Username: " user

    if [[ $user == "" ]]; then
      blank_line
      print_warning "Please enter a username - root is not enabled!"
    else
      PRIV_USERNAME="$user"
      was_set="true"
    fi
  done
}

ask_for_user_password() {
  print_title "Privileged Account (${PRIV_USERNAME}) Password"
  print_title_info "Set the password of the privileged account."

  local was_set="false"

  blank_line
  while [[ $was_set == "false" ]]; do
    local pwd1=""
    local pwd2=""
    read -srp "Password for (${PRIV_USERNAME}): " pwd1
    echo -e ""
    read -srp "Once again: " pwd2

    if [[ $pwd1 == "$pwd2" ]]; then
      PRIV_PASSWORD="$pwd1"
      was_set="true"
    else
      blank_line
      print_warning "They didn't match... try again."
    fi
  done
}


###############################################################################
# Installation/configuration functions
###############################################################################
configure_mirrorlist() {
  print_info "Configuring repository mirrorlist"

  pacman -Syy |& tee -a "${LOG}"

  # Install reflector
  pacman -S --noconfirm reflector |& tee -a "${LOG}"

  print_status "    Backing up the original mirrorlist..."
  rm -f "/etc/pacman.d/mirrorlist.orig" |& tee -a "${LOG}"
  mv -i "/etc/pacman.d/mirrorlist" "/etc/pacman.d/mirrorlist.orig" |& tee -a "${LOG}"

  print_status "    Rotating the new list into place..."
  # Run reflector
  /usr/bin/reflector --score 100 --fastest 20 --age 12 --sort rate --protocol https --save /etc/pacman.d/mirrorlist |& tee -a "${LOG}"

  # Allow global read access (required for non-root yaourt execution)
  chmod +r /etc/pacman.d/mirrorlist |& tee -a "${LOG}"

  # Update one more time
  pacman -Syy |& tee -a "${LOG}"
}

unmount_partitions() {
  mounted_partitions=($(lsblk | grep /mnt | awk '{print $7}' | sort -r))
  swapoff -a
  for i in "${mounted_partitions[@]}"; do
    umount "$i"
  done
}

wipe_disks() {
  print_info "Wiping disks"

  print_info "    Wiping main disk partitions"
  wipefs --all --force "${MAIN_DISK}*" 2>/dev/null || true
  wipefs --all --force "${MAIN_DISK}" || true
  dd if=/dev/zero of="$MAIN_DISK" bs=512 count=10 conv=notrunc

  partprobe 2>/dev/null || true
}

create_partitions() {
  print_info "Creating partitions"

  # Clear out the partitions
  sgdisk -g --zap "$MAIN_DISK"

  # EFI partition (500mb)
  sgdisk -g -n 1:2048:1026047 -c 1:"EFI" -t 1:ef00 "$MAIN_DISK"

  # The rest of the disk is for LVM
  sgdisk -g -n 2:1026048:0 -c 2:"LVM" -t 2:8e00 "$MAIN_DISK"

  partprobe 2>/dev/null || true
}

setup_lvm() {
  print_info "Setting up LVM"
  
  cryptsetup --use-random luksFormat ${MAIN_DISK}${MAIN_DISK_NVME}2
  cryptsetup luksOpen ${MAIN_DISK}${MAIN_DISK_NVME}2 cryptdisk

  pvcreate /dev/mapper/cryptdisk
  vgcreate "vg" /dev/mapper/cryptdisk

  # Enough for hibernate
  lvcreate -L 12GB "vg" -n swap

  # Just a small one to keep anything locally in case of re-install
  lvcreate -L 5GB "vg" -n data
  
  # Spit the remaining equally
  lvcreate -l 50%VG "vg" -n root
  lvcreate -l 50%VG "vg" -n home
}

format_partitions() {
  print_info "Formatting partitions"

  # Format the EFI partition
  mkfs.vfat -F32 "${MAIN_DISK}${MAIN_DISK_NVME}1"
  
  # Now the LVM partitions...
  mkfs.ext4 "/dev/vg/data"
  mkfs.ext4 "/dev/vg/root"
  mkfs.ext4 "/dev/vg/home"
  mkswap "/dev/vg/swap"
}

mount_partitions() {
  print_info "Mounting partitions"

  # First load the root
  mount -t ext4 -o defaults,rw,relatime,errors=remount-ro /dev/vg/root /mnt
  
  # Make sure we have mount paths for the rest
  mkdir -p "/mnt/boot"
  mkdir -p "/mnt/data"
  mkdir -p "/mnt/home"

  # Mount the rest
  mount -t vfat -o defaults,rw,relatime,utf8,errors=remount-ro "${MAIN_DISK}${MAIN_DISK_NVME}1" /mnt/boot
  mount -t ext4 -o defaults,rw,relatime /dev/vg/data /mnt/data
  mount -t ext4 -o defaults,rw,relatime /dev/vg/home /mnt/home

  swapon /dev/vg/swap
}

install_base_system() {
  print_info "Installing base system"

  pacman -S --noconfirm archlinux-keyring |& tee -a "${LOG}"

  # Install kernel
  case "$KERNEL_VERSION" in
  "lts")
    pacstrap /mnt base base-devel linux-lts linux-lts-headers linux-firmware |& tee -a "${LOG}"
    [[ $? -ne 0 ]] && error_msg "Installing base system to /mnt failed. Check error messages above."
    ;;
  "hard")
    pacstrap /mnt base base-devel linux-hardened linux-hardened-headers linux-firmware |& tee -a "${LOG}"
    [[ $? -ne 0 ]] && error_msg "Installing base system to /mnt failed. Check error messages above."
    ;;
  "zen")
    pacstrap /mnt base base-devel linux-zen linux-zen-headers linux-firmware |& tee -a "${LOG}"
    [[ $? -ne 0 ]] && error_msg "Installing base system to /mnt failed. Check error messages above."
    ;;
  *)
    pacstrap /mnt base base-devel linux linux-headers linux-firmware |& tee -a "${LOG}"
    [[ $? -ne 0 ]] && error_msg "Installing base system to /mnt failed. Check error messages above."
    ;;
  esac
  
  # Need different for vendors
  pacstrap /mnt "${VENDOR}-ucode" |& tee -a "${LOG}"
  [[ $? -ne 0 ]] && error_msg "Installing base system to /mnt failed. Check error messages above."

  # Install file system tools
  pacstrap /mnt lvm2 dosfstools mtools gptfdisk |& tee -a "${LOG}"
  [[ $? -ne 0 ]] && error_msg "Installing base system to /mnt failed. Check error messages above. Part 4."

  # Install networking tools
  pacstrap /mnt dialog networkmanager networkmanager-l2tp xl2tpd strongswan networkmanager-strongswan |& tee -a "${LOG}"
  [[ $? -ne 0 ]] && error_msg "Installing base system to /mnt failed. Check error messages above. Part 5."

  # Remaining misc tools
  pacstrap /mnt reflector git nano vim openssh ansible terminus-font gnupg ccid |& tee -a "${LOG}"
  [[ $? -ne 0 ]] && error_msg "Installing base system to /mnt failed. Check error messages above. Part 6."

  # Add the ssh group
  arch_chroot "groupadd ssh"

  # Set the NetworkManager & ssh services to be enabled
  arch_chroot "systemctl enable NetworkManager.service"
  arch_chroot "systemctl enable sshd.service"
}

configure_wifi() {
  if [[ $WIFI_ENABLED == 0 ]]; then
    return
  fi

  print_info "Configure WiFi"

  pacstrap /mnt iwd |& tee -a "${LOG}"
  [[ $? -ne 0 ]] && error_msg "Installing wifi system to /mnt failed."

  # Use iwd with NetworkManager
  echo '[device]' > /mnt/etc/NetworkManager/conf.d/wifi_backend.conf
  echo 'wifi.backend=iwd' >> /mnt/etc/NetworkManager/conf.d/wifi_backend.conf

  arch_chroot "systemctl enable iwd"
}

configure_keymap() {
  print_info "Configure keymap"
  echo "KEYMAP=$KEYMAP" >/mnt/etc/vconsole.conf
  echo "FONT=ter-120n" >>/mnt/etc/vconsole.conf
}

configure_fstab() {
  print_info "Write fstab"

  genfstab -U /mnt >> /mnt/etc/fstab
}

configure_hostname() {
  print_info "Setup hostname"

  echo "$HOST_NAME" >/mnt/etc/hostname

  # Add the lines in case they are not in the file...
  arch_chroot "grep -q '^127.0.0.1\s' /etc/hosts || echo '127.0.0.1  temp' >> /etc/hosts"
  arch_chroot "grep -q '^::1\s' /etc/hosts || echo '::1  temp' >> /etc/hosts"
  arch_chroot "grep -q '^127.0.1.1\s' /etc/hosts || echo '127.0.1.1  temp' >> /etc/hosts"
  # Now put in the proper values
  arch_chroot "sed -i 's/^127.0.0.1\s.*$/127.0.0.1  localhost/' /etc/hosts"
  arch_chroot "sed -i 's/^::1\s.*$/::1  localhost/' /etc/hosts"
  arch_chroot "sed -i 's/^127.0.1.1\s.*$/127.0.1.1  '${HOST_NAME}' '${HOST_NAME%%.*}'/' /etc/hosts"
}

configure_timezone() {
  print_info "Configuring timezone"

  arch_chroot "ln -sf /usr/share/zoneinfo/Europe/London /etc/localtime"
  arch_chroot "sed -i '/#NTP=/d' /etc/systemd/timesyncd.conf"
  arch_chroot "sed -i 's/#Fallback//' /etc/systemd/timesyncd.conf"
  arch_chroot 'echo "FallbackNTP=0.pool.ntp.org 1.pool.ntp.org 0.uk.pool.ntp.org" >> /etc/systemd/timesyncd.conf'
  arch_chroot "systemctl enable systemd-timesyncd.service"
}

configure_clock() {
  print_info "Configuring clock"
  arch_chroot "hwclock --systohc --utc"
}

configure_locale() {
  print_info "Configuring locale"
  echo 'LANG="en_GB.UTF-8"' >/mnt/etc/locale.conf
  echo 'LANGUAGE="en_GB:en"' >>/mnt/etc/locale.conf
  echo 'LC_ALL="en_GB.UTF-8"' >>/mnt/etc/locale.conf
  arch_chroot "sed -i 's/# en_GB.UTF-8/en_GB.UTF-8/' /etc/locale.gen"
  arch_chroot "sed -i 's/#en_GB.UTF-8/en_GB.UTF-8/' /etc/locale.gen"
  arch_chroot "locale-gen"
}

configure_mkinitcpio() {
  print_info "Configuring mkinitcpio"

  sed -i '/^HOOKS/c\HOOKS=(base udev autodetect keyboard keymap modconf block encrypt lvm2 filesystems fsck)' /mnt/etc/mkinitcpio.conf |& tee -a "${LOG}"

  # Setup compression
  sed -i 's/#COMPRESSION="lz4"/COMPRESSION="lz4"/' /mnt/etc/mkinitcpio.conf |& tee -a "${LOG}"
  sed -i '/^#COMPRESSION_OPTIONS/c\COMPRESSION_OPTIONS=(-3)' /mnt/etc/mkinitcpio.conf |& tee -a "${LOG}"

  arch_chroot "mkinitcpio -P"
}

install_bootloader() {
  print_info "Install bootloader"

  arch_chroot "bootctl --path=/boot install"

  echo 'default arch' > /mnt/boot/loader/loader.conf
  echo 'timeout 5' >> /mnt/boot/loader/loader.conf

  # Get the PARTUUID from the system partition into arch.conf
  local part_uuid=$(blkid -s PARTUUID -o value "${MAIN_DISK}${MAIN_DISK_NVME}2")

  local kernel=""

  # TODO: Install multiple kernels
  if [ $KERNEL_VERSION == "default" ]; then
    kernel=""
  elif [ $KERNEL_VERSION == "lts" ]; then
    kernel="-lts"
  elif [ $KERNEL_VERSION == "hard" ]; then
    kernel="-hard"
  elif [ $KERNEL_VERSION == "zen" ]; then
    kernel="-zen"
  fi

  echo '# Generated by arch-install script' > /mnt/boot/loader/entries/arch.conf
  echo '# https://git.io/JEAM6' > /mnt/boot/loader/entries/arch.conf
  echo 'title Arch Linux' >> /mnt/boot/loader/entries/arch.conf
  echo "linux /vmlinuz-linux${kernel}" >> /mnt/boot/loader/entries/arch.conf
  echo "initrd /${VENDOR}-ucode.img" >> /mnt/boot/loader/entries/arch.conf
  echo "initrd /initramfs-linux${kernel}.img" >> /mnt/boot/loader/entries/arch.conf
  echo "options cryptdevice=PARTUUID=${part_uuid}:cryptdisk root=/dev/vg/root rw quiet splash" >> /mnt/boot/loader/entries/arch.conf
}

configure_sudo() {
  print_info "Configuring sudo..."

  # Use numbered, as sudo takes last matching value, so want mine to be last
  echo '%wheel ALL=(ALL) ALL' >> /mnt/etc/sudoers.d/10-wheel
  chmod 440 /mnt/etc/sudoers.d/10-wheel


  # Some things I just don't want a password for
  echo "${PRIV_USERNAME} ALL=(ALL) NOPASSWD: /usr/bin/pacman, /usr/bin/makepkg, /usr/bin/ufw" >> /mnt/etc/sudoers.d/80-me
  chmod 440 /mnt/etc/sudoers.d/80-me
}

configure_pacman() {
  print_info "Configuring pacman..."
  cp -v /mnt/etc/pacman.conf /mnt/etc/pacman.conf.orig

  setup_repo() {
    local _has_repo
    _has_repo=$(grep -n "\[$1\]" /mnt/etc/pacman.conf | cut -f1 -d:)
    if [[ -z $_has_repo ]]; then
      echo -e "\n[$1]\nInclude = /etc/pacman.d/mirrorlist" >>/mnt/etc/pacman.conf
    else
      sed -i "${_has_repo}s/^#//" /mnt/etc/pacman.conf
      _has_repo=$((_has_repo + 1))
      sed -i "${_has_repo}s/^#//" /mnt/etc/pacman.conf
    fi
  }

  sed -i '/^#Color/c\Color' /mnt/etc/pacman.conf |& tee -a "${LOG}"
  sed -i '/^#TotalDownload/c\TotalDownload' /mnt/etc/pacman.conf |& tee -a "${LOG}"

  print_info "Enabling AUR..."
  echo '[archlinuxfr]' >> /mnt/etc/pacman.conf
  echo 'SigLevel = Never' >> /mnt/etc/pacman.conf
  echo 'Server = http://repo.archlinux.fr/$arch' >> /mnt/etc/pacman.conf

  arch_chroot "pacman -Sy"
}

install_yay() {
  print_info "Install yay"
  
  arch_chroot 'su ben -c "git clone https://aur.archlinux.org/yay-bin.git /home/ben/yay && cd /home/ben/yay && sudo makepkg --noconfirm -si && rm -rf /home/ben/yay'
}

copy_wifi_config() {
  if [[ $WIFI_ENABLED == 0 ]]; then
    return
  fi

  mkdir -p /mnt/var/lib/iwd

  print_info "Copying wifi networks (if any)"
  # Hide exit code as well to stop the trap from getting hold of it
  cp /var/lib/iwd/*.psk /mnt/var/lib/iwd/ 2>/dev/null || :

  print_info "Adding home wifi"
  echo '[Security]' > /mnt/var/lib/iwd/Tux.8021x
  echo 'EAP-Method=PEAP' >> /mnt/var/lib/iwd/Tux.8021x
  echo 'EAP-Identity=anonymous' >> /mnt/var/lib/iwd/Tux.8021x
  echo 'EAP-PEAP-Phase2-Method=MSCHAPV2' >> /mnt/var/lib/iwd/Tux.8021x
  echo 'EAP-PEAP-Phase2-Identity=ben' >> /mnt/var/lib/iwd/Tux.8021x
  echo '' >> /mnt/var/lib/iwd/Tux.8021x
  echo '[Settings]' >> /mnt/var/lib/iwd/Tux.8021x
  echo 'AutoConnect=true' >> /mnt/var/lib/iwd/Tux.8021x

}

setup_user_account() {
  print_info "Setting up privileged account"

  arch_chroot "useradd -m -G wheel -s /bin/bash ${PRIV_USERNAME}"
  arch_chroot "echo -n '${PRIV_USERNAME}:${PRIV_PASSWORD}' | chpasswd -c SHA512"

  # Add me to the ssh group
  arch_chroot "usermod -a -G ssh ${PRIV_USERNAME}"
}

copy_mirrorlist() {
  print_info "Copying mirrorlist"

  # Backup the original
  rm -f "/mnt/etc/pacman.d/mirrorlist.orig"
  mv -i "/mnt/etc/pacman.d/mirrorlist" "/mnt/etc/pacman.d/mirrorlist.orig"

  # Copy ours over
  mv -i "/etc/pacman.d/mirrorlist" "/mnt/etc/pacman.d/mirrorlist"

  # Allow global read access (required for non-root yaourt execution)
  chmod +r /mnt/etc/pacman.d/mirrorlist
}

wrap_up() {
  print_title "INSTALL COMPLETED"
  print_success "Reboot, login, and run ansible scripts."
  blank_line
}

### Main flow
loadkeys "$KEYMAP" # load the keymap

print_title "https://github.com/benperiton/provision-arch"
print_title_info "Provision Arch -> Automated script to install my Arch systems."
print_line
print_status "Script can be cancelled at any time with CTRL+C"
pause_function

check_vendor
check_root
check_archlinux
check_boot_system

## Ask questions
ask_for_hostname
ask_for_main_disk
ask_for_kernel_level
ask_for_wifi
ask_for_user_account
ask_for_user_password

print_summary

configure_mirrorlist

unmount_partitions
wipe_disks
create_partitions
setup_lvm
format_partitions
mount_partitions

install_base_system

setup_user_account

configure_wifi
configure_keymap
configure_fstab
configure_hostname
configure_timezone
configure_clock
configure_locale
configure_mkinitcpio

install_bootloader

configure_sudo
copy_mirrorlist
configure_pacman
install_yay

copy_wifi_config

wrap_up
